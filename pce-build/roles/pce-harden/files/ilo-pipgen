#!/usr/bin/env bash
#
# Copyright 2013-2019 Illumio, Inc. All Rights Reserved.
#

read -r -d '' USAGE <<EOF
Usage: $0 -i <input file> -o <output file> [-p <port>,<port>,...] [-s <vip>,<vip>,...]

The input file contains a list of IP addresses, one per line. This
file should contain the IP addresses of all nodes in your cluster, or
for a supercluster installation, all nodes in all clusters. Blank
lines and lines starting with '#' are ignored, and any text following
the IP address is also ignored.

The output file will contain the generated list of iptables rules.

The -p parameter is used to override the list of public ports. These
are the Illumio ports that will be open for connections from outside
of the cluster. The default is 8443,8444. If you have customized the
front_end_https_port or front_end_event_service_port, or if you've
configured a front_end_management_https_port, you'll need to supply a
list of ports here.

The public ports will normally allow connections from all sources. If
your cluster is behind a load balancer using SNAT, you might want to
allow connections on these ports ONLY from the SNAT address, to
prevent direct connections that bypass the load balancer. If you use
the -s parameter, public ports will allow connections only from the
specified IP addresses.
EOF

read -r -d '' IPV6 <<EOF
IPv6 IMPORTANT INFORMATION

Separate iptables stacks are used for IPv4 and IPv6. If your server
has IPv6 enabled, connections may be allowed on ports that are blocked
over IPv4. The configuration generated by this script covers only
IPv4, not IPv6.

If IPv6 connectivity is not needed in your environment, Illumio
recommends disabling it. If this is not an option, please look at
/etc/sysconfig/ip6tables and ensure that a suitably restrictive policy
is in place. Note that Illumio never uses IPv6 internally, and
disabling IPv6 will not impact PCE operations.
EOF

fail() {
  echo "FAIL" 1>&2
  echo "$1" 1>&2
  exit 1
}

usage() {
  echo "$1" 1>&2
  echo "Run $0 -h for help." 1>&2
  exit 1
}

PORTS=8443,8444
PUBLIC=

while getopts "i:o:p:s:h6" OPTION; do
  case "$OPTION" in
    i) INPUT="$OPTARG" ;;
    o) OUTPUT="$OPTARG" ;;
    p) PORTS="$OPTARG" ;;
    s) PUBLIC="$OPTARG" ;;
    h) fail "$USAGE" ;;
    6) fail "$IPV6" ;;
    *) usage "Invalid argument." ;;
  esac
done

[[ "$INPUT"  == "" ]] && usage "No input file specified."
[[ "$OUTPUT" == "" ]] && usage "No output file specified."

[[ "$PORTS"  =~ ^[0-9][0-9,]*$      ]] || usage "Invalid port list."
[[ "$PUBLIC" =~ ^([0-9][0-9./,]+)?$ ]] || usage "Invalid VIP list."

###############################################################################

exec 0<$INPUT || fail "Error reading $INPUT"

exec 3<&1
exec 1>$OUTPUT || fail "Error writing $OUTPUT"

ALLOW=(
  tcp,3100:3600
  tcp,5100:6300
  tcp,8000:8400
  udp,8000:8400
  tcp,11200:11300
  tcp,24200:24300
)

NOW=`date`
cat <<EOF
#
# Generated by $0 on $HOSTNAME
# $NOW
# 

*raw

:PREROUTING ACCEPT
:OUTPUT     ACCEPT

-A PREROUTING -i lo -j NOTRACK
-A OUTPUT     -o lo -j NOTRACK

COMMIT

*filter

:INPUT   ACCEPT
:FORWARD DROP
:OUTPUT  ACCEPT

-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Allow public ports

EOF

if [[ "$PUBLIC" == "" ]]; then
  echo "-A INPUT -p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -j ACCEPT"
  echo
else
  IFS="," read -ra VIPS <<< "$PUBLIC"

  for VIP in ${VIPS[*]}; do
    echo "-A INPUT -p tcp -s $VIP -m multiport --dports $PORTS -m conntrack --ctstate NEW -j ACCEPT"
  done

  echo
fi

declare -a IPS_READ

while read LINE; do
  if [[ ! "$LINE" =~ ^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) ]]; then
    if [[ "$LINE" != "" ]] && [[ ! "$LINE" =~ ^# ]]; then
      echo "WARNING: line ignored due to no valid IP address found: [$LINE]" 1>&2
    fi
    continue
  fi
  IP=${BASH_REMATCH[1]}
  [[ " ${IPS_READ[@]} " =~ " ${IP} " ]] && fail "Duplicate IP address found: ${IP}"
  IPS_READ+=($IP)

  echo "# Allow from $LINE"
  echo

  for ALLOWED in ${ALLOW[*]}; do
    PROTO=${ALLOWED%%,*}
    RANGE=${ALLOWED##*,}

    echo "-A INPUT -p $PROTO -s $IP --dport $RANGE -m conntrack --ctstate NEW -j ACCEPT"
  done

  echo
done

[[ ${#IPS_READ[@]} -eq 0 ]] && fail "No IP addresses found in input file \"${INPUT}\""

echo "# Block all other traffic to Illumio ports"
echo

if [[ "$PUBLIC" != "" ]]; then
  echo "-A INPUT -p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -j DROP"
  echo
fi

for ALLOWED in ${ALLOW[*]}; do
  PROTO=${ALLOWED%%,*}
  RANGE=${ALLOWED##*,}

  echo "-A INPUT -p $PROTO --dport $RANGE -j DROP"
done

cat <<EOF

# Insert custom rules here if desired:



# Done

COMMIT
EOF

exec 1<&3

[[ -f /etc/sysconfig/iptables ]] || cat <<EOF

*******************************************************************************
*
* WARNING
*
* You do not seem to have iptables installed. If this is a RHEL /
* CentOS 7 server using firewalld, you will need to switch to iptables
* to use this script. For example:
*
* yum install -y iptables-services
* systemctl mask --now firewalld
* systemctl enable iptables ip6tables
*
*******************************************************************************
EOF

cat <<EOF

Wrote: $OUTPUT

To apply, copy the output file to /etc/sysconfig/iptables and run the
appropriate command for your system:

  service iptables restart
  systemctl restart iptables

Also please be aware that if IPv6 is enabled, connections that are
blocked using IPv4 may still be allowed using IPv6. To learn more,
please run:

  $0 -6

EOF
